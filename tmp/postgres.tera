use serde::{Deserialize, Serialize};
use sqlx::FromRow;
use sqlx::types::*;
use sqlx::types::chrono::*;
use sky_whatever::result::Result;
use super::PG_POOL;

pub const TABLE_NAME: &'static str = "{{table.table_name}}";

pub const FIELDS: &'static str = "{%- for field in table.fields -%}{{field.field_name}}{%- if loop.last == false -%},{%- endif -%}{%- endfor -%}";


{% if table.comment -%}
	/// {{ table.comment }}
{% endif -%}

{% for index in table.unique_key -%}
    /// Unique：{{index}}
{% endfor -%}

{% for index in table.index_key -%}
    /// Indexes：{{index}}
{% endfor -%}


#[derive(Debug, Clone, Serialize, Deserialize, FromRow)]
pub struct {{ table.struct_name }} {
{%- for v in table.fields %}
	{% if v.comment -%}
	    /// {{ v.comment }} {% if v.database_field_type %} field_type: {{ v.database_field_type }}{% endif %}{% if v.default %} default: {{ v.default }}{% endif %} {% if v.default == '' %} default: ''{% endif %}
	{% endif -%}
	{% if v.is_null == 1 -%}
	    {%- if v.field_name == 'type' -%}
	        pub r#{{ v.field_name }}: Option<{{ v.field_type }}>,
	    {%- else -%}
    	    pub {{ v.field_name }}: Option<{{ v.field_type }}>,
    	{%- endif -%}
    {%- else -%}
        {% if v.field_type == 'NaiveDateTime' -%}
            pub {{ v.field_name }}: Option<{{ v.field_type }}>,
        {%- else -%}
            {%- if v.field_name == 'type' -%}
            	pub r#{{ v.field_name }}: {{ v.field_type }},
            {%- else -%}
                pub {{ v.field_name }}: {{ v.field_type }},
            {%- endif -%}
        {%- endif -%}
    {%- endif -%}
{%- endfor %}
}

impl {{table.struct_name}} {
    pub async fn insert(&self) -> Result<u64> {
        let mut conn = PG_POOL.acquire().await?;
    	let sql = format!("INSERT INTO {{table.table_name}} ({}) VALUES({% for field in table.fields -%}?{% if loop.last == false %},{% endif %}{%- endfor %})", FIELDS);
    	let data = sqlx::query(&sql)
    	{%- for field in table.fields %}
    	        {% if field.field_name == 'type' -%}
                    .bind(&self.r#{{field.field_name}})
                {%- else -%}
                    .bind(&self.{{field.field_name}})
                {%- endif %}
        {%- endfor %}
    	    .execute(&mut conn)
            .await?
            .rows_affected();
        Ok(data)
    }

    pub async fn select_all() -> Result<Vec<Self>> {
        let sql = format!("SELECT {} from {} {% for v in table.fields -%}{%- if v.field_name == 'is_deleted' -%} WHERE is_deleted = 0 {%- endif -%}{%- endfor -%}", FIELDS, TABLE_NAME);
        let mut conn = PG_POOL.acquire().await?;
        let data = sqlx::query_as::<_, Self>(&sql).fetch_all(&mut conn).await?;
        Ok(data)
    }
}